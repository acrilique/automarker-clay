#!/bin/sh
set -e

# This script manually runs CMake's fixup_bundle utility on a generated
# .xcarchive to correctly package dynamic libraries.

echo "--- Starting Manual Bundle Fixup ---"

# --- Configuration ---
# The script can be run without arguments, in which case it will default to looking
# for the archive in the 'build' directory.
ARCHIVE_PATH_ARG="$1"

# Default to the standard archive path if no argument is provided.
if [ -z "$ARCHIVE_PATH_ARG" ]; then
  echo "No archive path provided. Defaulting to 'build/automarker-c.xcarchive'"
  ARCHIVE_PATH_ARG="build/automarker-c.xcarchive"
fi

# Convert to an absolute path, which is required by fixup_bundle
REAL_ARCHIVE_PATH=$(cd "$(dirname "$ARCHIVE_PATH_ARG")" && pwd)/$(basename "$ARCHIVE_PATH_ARG")

APP_BUNDLE_PATH="${REAL_ARCHIVE_PATH}/Products/Applications/automarker-c.app"
EXECUTABLE_PATH="${APP_BUNDLE_PATH}/Contents/MacOS/automarker-c"
BINARY_DIR=$(dirname "$REAL_ARCHIVE_PATH") # The 'build' directory

if [ ! -d "$APP_BUNDLE_PATH" ]; then
  echo "Error: App bundle not found at expected path: ${APP_BUNDLE_PATH}"
  exit 1
fi

# Define the search paths for libraries.
# The archive places everything in the Products/Applications directory, so we search there.
LIBRARY_SEARCH_PATHS="${REAL_ARCHIVE_PATH}/Products/Applications"

echo "  Archive Path: ${REAL_ARCHIVE_PATH}"
echo "  App Bundle:   ${APP_BUNDLE_PATH}"
echo "  Libs Path:    ${LIBRARY_SEARCH_PATHS}"
echo "  Binary Dir:   ${BINARY_DIR}"

# --- Create and run the fixup script ---
# We need to create a temporary cmake script to call fixup_bundle,
# as it's a function, not a standalone command.

cat << EOF > "${BINARY_DIR}/temp_manual_fixup.cmake"
# This script is auto-generated by run_fixup.sh
include(BundleUtilities)
fixup_bundle(
  "${EXECUTABLE_PATH}"
  ""
  "${LIBRARY_SEARCH_PATHS}"
)
EOF

# Execute the temporary script
echo "Running cmake -P ${BINARY_DIR}/temp_manual_fixup.cmake..."
cmake -P "${BINARY_DIR}/temp_manual_fixup.cmake"

echo "--- Bundle fixup script finished successfully! ---"
