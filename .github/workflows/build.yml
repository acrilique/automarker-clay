name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install dependencies (arm64)
      if: matrix.arch == 'arm64'
      run: brew install sdl3 sdl3_image sdl3_ttf curl fftw libsndfile openblas libomp

    - name: Install dependencies (x86_64)
      if: matrix.arch == 'x86_64'
      run: |
        arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        arch -x86_64 /usr/local/bin/brew install sdl3 sdl3_image sdl3_ttf curl fftw libsndfile openblas libomp libpng

    - name: Configure CMake
      run: >
        cmake -B build
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
        -DCMAKE_PREFIX_PATH="$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix openblas);$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libomp);$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libpng)"
        -DCMAKE_C_FLAGS="-I$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix openblas)/include"
        -DCMAKE_EXE_LINKER_FLAGS="-L$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix)/lib"
        -DOpenMP_C_FLAGS="-Xpreprocessor -fopenmp -I$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libomp)/include"
        -DOpenMP_C_LIB_NAMES="omp"
        -DOpenMP_omp_LIBRARY=$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libomp)/lib/libomp.dylib

    - name: Build
      run: cmake --build build --config Release

    - name: Package
      run: |
        mkdir -p release/package/lib
        cp build/Release/automarker-c release/package/
        cp -R build/Release/resources release/package/

        BREW_PREFIX=$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix)
        DEPS=$(otool -L release/package/automarker-c | grep $BREW_PREFIX | awk '{print $1}')

        for DEP in $DEPS; do
          cp $DEP release/package/lib/
        done

        install_name_tool -add_rpath @executable_path/lib release/package/automarker-c

        for DEP in $DEPS; do
          install_name_tool -change $DEP @rpath/$(basename $DEP) release/package/automarker-c
        done

        for LIB in release/package/lib/*.dylib; do
          SUB_DEPS=$(otool -L $LIB | grep $BREW_PREFIX | awk '{print $1}')
          for SUB_DEP in $SUB_DEPS; do
            if [ -f "release/package/lib/$(basename $SUB_DEP)" ]; then
              install_name_tool -change $SUB_DEP @rpath/$(basename $SUB_DEP) $LIB
            fi
          done
        done

        cd release
        zip -r automarker-c-macos-${{ matrix.arch }}.zip package
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: automarker-c-macos-${{ matrix.arch }}
        path: release/automarker-c-macos-${{ matrix.arch }}.zip

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure CMake
      run: cmake -B build -A x64 -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake

    - name: Build
      run: cmake --build build --config Release

    - name: Package
      run: |
        mkdir release
        7z a release/automarker-c-windows-x64.zip ./build/Release/*
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: automarker-c-windows-x64
        path: release/automarker-c-windows-x64.zip

  build-linux:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git make cmake pkg-config ninja-build curl libcurl4-openssl-dev libfftw3-dev libsndfile1-dev libopenblas-dev libomp-dev libpng-dev gnome-desktop-testing libasound2-dev libpulse-dev libaudio-dev libfribidi-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev libaom-dev libdav1d-dev libjpeg-turbo8-dev libavif-dev libjxl-dev libtiff-dev libwebp-dev zlib1g-dev libfreetype-dev libharfbuzz-dev

    - name: Build and install SDL3
      run: |
        git clone https://github.com/libsdl-org/SDL.git
        cd SDL
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        sudo make install
        cd ../..

    - name: Build and install SDL3_image
      run: |
        git clone https://github.com/libsdl-org/SDL_image.git
        cd SDL_image
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        sudo make install
        cd ../..

    - name: Build and install SDL3_ttf
      run: |
        git clone https://github.com/libsdl-org/SDL_ttf.git
        cd SDL_ttf
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        sudo make install
        cd ../..

    - name: Configure CMake
      run: |
        LIBOMP_PATH=$(find /usr/lib -name "libomp.so")
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="/usr/lib/openblas-base" \
          -DCMAKE_C_FLAGS="-I/usr/include/openblas" \
          -DOpenMP_C_FLAGS="-fopenmp" \
          -DOpenMP_C_LIB_NAMES="omp" \
          -DOpenMP_omp_LIBRARY="$LIBOMP_PATH"

    - name: Build
      run: cmake --build build --config Release

    - name: Package
      run: |
        mkdir -p release/package/lib
        cp build/Release/automarker-c release/package/
        cp -R build/Release/resources release/package/

        DEPS=$(ldd build/Release/automarker-c | grep "=> /" | awk '{print $3}')

        for DEP in $DEPS; do
          cp $DEP release/package/lib/
        done

        cd release
        zip -r automarker-c-linux-x64.zip package

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: automarker-c-linux-x64
        path: release/automarker-c-linux-x64.zip
