name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install dependencies (arm64)
      if: matrix.arch == 'arm64'
      run: brew install sdl3 sdl3_image sdl3_ttf curl fftw libsndfile openblas libomp cjson

    - name: Install dependencies (x86_64)
      if: matrix.arch == 'x86_64'
      run: |
        arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        arch -x86_64 /usr/local/bin/brew install sdl3 sdl3_image sdl3_ttf curl fftw libsndfile openblas libomp libpng cjson

    - name: Configure CMake
      run: >
        cmake -B build
        -DCMAKE_BUILD_TYPE=Release
        -DMACOS_BUNDLE=ON
        -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
        -DCMAKE_PREFIX_PATH="$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix openblas);$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libomp);$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libpng)"
        -DCMAKE_C_FLAGS="-I$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix openblas)/include"
        -DCMAKE_EXE_LINKER_FLAGS="-L$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix)/lib"
        -DOpenMP_C_FLAGS="-Xpreprocessor -fopenmp -I$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libomp)/include"
        -DOpenMP_C_LIB_NAMES="omp"
        -DOpenMP_omp_LIBRARY=$(${{ matrix.arch == 'arm64' && 'brew' || 'arch -x86_64 /usr/local/bin/brew' }} --prefix libomp)/lib/libomp.dylib

    - name: Build
      run: cmake --build build --config Release

    - name: Sign and Notarize
      if: success()
      env:
        MAC_CERT_P12_BASE64: ${{ secrets.MAC_CERT_P12_BASE64 }}
        MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
        API_KEY_P8_BASE64: ${{ secrets.API_KEY_P8_BASE64 }}
        API_KEY_ID: ${{ secrets.API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.API_ISSUER_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Create a temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app.keychain
        security create-keychain -p "temporary_keychain_password" $KEYCHAIN_PATH
        security list-keychains -s $KEYCHAIN_PATH
        security unlock-keychain -p "temporary_keychain_password" $KEYCHAIN_PATH
        
        # Decode and import the certificate
        printf "%s" "$MAC_CERT_P12_BASE64" | base64 --decode > $RUNNER_TEMP/certificate.p12
        security import $RUNNER_TEMP/certificate.p12 -k $KEYCHAIN_PATH -P $MAC_CERT_PASSWORD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "temporary_keychain_password" $KEYCHAIN_PATH
        
        # Decode and save the App Store Connect API key
        mkdir -p $RUNNER_TEMP/private_keys
        printf "%s" "$API_KEY_P8_BASE64" | base64 --decode > $RUNNER_TEMP/private_keys/AuthKey_${API_KEY_ID}.p8
        
        # Sign the application bundle
        codesign --force --deep --options runtime --timestamp \
          --entitlements automarker-c.entitlements \
          --sign "Developer ID Application: Lluc Simó Margalef (${APPLE_TEAM_ID})" \
          build/Release/automarker-c.app
        
        # Verify the app signature
        codesign --verify --deep --strict --verbose=2 build/Release/automarker-c.app
        
        # Package (create DMG)
        (cd build && cpack)
        
        # Find the created DMG
        DMG_PATH=$(find build -name "*.dmg" -print -quit)

        # Sign the DMG
        codesign --force --options runtime --timestamp \
          --sign "Developer ID Application: Lluc Simó Margalef (${APPLE_TEAM_ID})" \
          "$DMG_PATH"
          
        # Notarize the DMG
        xcrun notarytool submit "$DMG_PATH" \
          --key $RUNNER_TEMP/private_keys/AuthKey_${API_KEY_ID}.p8 \
          --key-id ${API_KEY_ID} \
          --issuer ${API_ISSUER_ID} \
          --wait
          
        # Staple the notarization ticket
        xcrun stapler staple -v "$DMG_PATH"
        
        # Verify the final package
        spctl -a -vv "$DMG_PATH"

    - name: Rename package
      run: |
        DMG_PATH=$(find build -name "*.dmg" -print -quit)
        mv "$DMG_PATH" build/automarker-c-macos-${{ matrix.arch }}.dmg

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: automarker-c-macos-${{ matrix.arch }}
        path: build/automarker-c-macos-${{ matrix.arch }}.dmg
        compression-level: 0

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure CMake
      run: cmake -B build -A x64 -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake

    - name: Build
      run: cmake --build build --config Release

    - name: Package
      run: |
        mkdir release
        7z a release/automarker-c-windows-x64.zip ./build/Release/*

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: automarker-c-windows-x64
        path: release/automarker-c-windows-x64.zip
        compression-level: 0

  build-linux:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git make cmake pkg-config ninja-build curl libcurl4-openssl-dev libfftw3-dev libsndfile1-dev libopenblas-dev libomp-dev libpng-dev gnome-desktop-testing libasound2-dev libpulse-dev libaudio-dev libfribidi-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev libaom-dev libdav1d-dev libjpeg-turbo8-dev libavif-dev libjxl-dev libtiff-dev libwebp-dev zlib1g-dev libfreetype-dev libharfbuzz-dev libcjson-dev

    - name: Build and install SDL3
      run: |
        git clone https://github.com/libsdl-org/SDL.git
        cd SDL
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        sudo make install
        cd ../..

    - name: Build and install SDL3_image
      run: |
        git clone https://github.com/libsdl-org/SDL_image.git
        cd SDL_image
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        sudo make install
        cd ../..

    - name: Build and install SDL3_ttf
      run: |
        git clone https://github.com/libsdl-org/SDL_ttf.git
        cd SDL_ttf
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        sudo make install
        cd ../..

    - name: Configure CMake
      run: |
        LIBOMP_PATH=$(find /usr/lib -name "libomp.so")
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="/usr/lib/openblas-base" \
          -DCMAKE_C_FLAGS="-I/usr/include/openblas" \
          -DOpenMP_C_FLAGS="-fopenmp" \
          -DOpenMP_C_LIB_NAMES="omp" \
          -DOpenMP_omp_LIBRARY="$LIBOMP_PATH"

    - name: Build
      run: cmake --build build --config Release

    - name: Package
      run: |
        mkdir -p release/package/lib
        cp build/Release/automarker-c release/package/
        cp -R build/Release/resources release/package/

        DEPS=$(ldd build/Release/automarker-c | grep "=> /" | awk '{print $3}')

        for DEP in $DEPS; do
          cp $DEP release/package/lib/
        done

        cd release
        zip -r automarker-c-linux-x64.zip package

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: automarker-c-linux-x64
        path: release/automarker-c-linux-x64.zip
        compression-level: 0

  release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    environment: deploy
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Flatten artifacts
        run: |
          mkdir release-artifacts
          find artifacts -type f \( -name "*.dmg" -o -name "*.zip" \) -exec mv {} release-artifacts/ \;

      - name: List flattened artifacts
        run: ls -R release-artifacts

      - name: Extract version from CMakeLists.txt
        id: version
        run: echo "VERSION=$(grep -oP 'project\(automarker-c VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "release-artifacts/*"
          tag: v${{ env.VERSION }}
          commit: ${{ github.sha }}
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
